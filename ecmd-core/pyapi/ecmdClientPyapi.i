
%module ecmd
// This kills all the warns generated by use of -keyword for functions
// we know can't be overloaded to use keyword args
#pragma SWIG nowarn=511

// python helper to load _ecmd.so correctly for fapi
%include dlopenhelper.i

/*********** Start Typemaps ***********/
%include typemaps.i
%include pybuffer.i
%include std_string.i
%include std_list.i
%include std_vector.i
%include stdint.i
%include ecmdCommon.i
%include ecmdConst.i
%include std_map.i
/*********** End Typemaps ***********/

/*********** Start Applies ***********/
// These are used to map C types that swig doesn't understand to types swig does understand
#if defined(APPLY_OUTARGS)
%include ecmdApplyOutArgs.i
#endif
/*********** End Applies ***********/

/*********** Start Insert Code ***********/
// Insert C code into the file swig generates
%{
#define SWIG_FILE_WITH_INIT
#define SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
#include "ecmdDefines.H"
#include "ecmdClientCapi.H"
#include "ecmdClientPyapi.H"
#include "ecmdDataBufferBase.H"
#include "ecmdDataBuffer.H"
#include "ecmdStructs.H"
#include "ecmdUtils.H"
#include "ecmdSharedUtils.H"
// Header file needed to compile with newer gcc
#include <stddef.h>

%}
%include "ecmdExtPyInserts.i"
/*********** End Insert Code ***********/

/*********** Start Templates ***********/
// Templates for list/vector support - one of these have to be created for every type needed
// From ecmdStructs.H
%template(ecmdThreadDataList)        std::list<ecmdThreadData>;
%extend std::list<ecmdThreadData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdThreadDataList(self)
%}
}
%template(ecmdChipUnitDataList)      std::list<ecmdChipUnitData>;
%extend std::list<ecmdChipUnitData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdChipUnitDataList(self)
%}
}
%template(ecmdChipDataList)          std::list<ecmdChipData>;
%extend std::list<ecmdChipData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdChipDataList(self)
%}
}
%template(ecmdSlotDataList)          std::list<ecmdSlotData>;
%extend std::list<ecmdSlotData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdSlotDataList(self)
%}
}
%template(ecmdNodeDataList)          std::list<ecmdNodeData>;
%extend std::list<ecmdNodeData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdNodeDataList(self)
%}
}
%template(ecmdCageDataList)          std::list<ecmdCageData>;
%extend std::list<ecmdCageData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdCageDataList(self)
%}
}
%template(stringList)                std::list<std::string>;
%extend std::list<std::string> {
%pythoncode %{
def __deepcopy__(self, memo):
    return stringList(self)
%}
}
%template(stringVector)              std::vector<std::string>;
%extend std::vector<std::string> {
%pythoncode %{
def __deepcopy__(self, memo):
    return stringVector(self)
%}
}
%template(ecmdDataBufferBaseVector)  std::vector<ecmdDataBufferBase>;
%extend std::vector<ecmdDataBufferBase> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdDataBufferBaseVector(self)
%}
}
%template(ecmdDataBufferVector)      std::vector<ecmdDataBuffer>;
%extend std::vector<ecmdDataBuffer> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdDataBufferVector(self)
%}
}
%template(ecmdDataBufferVectorVector) std::vector<std::vector<ecmdDataBuffer>>;
%extend std::vector<std::vector<ecmdDataBuffer>> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdDataBufferVectorVector(self)
%}
}
%template(ecmdMemoryEntryList)       std::list<ecmdMemoryEntry>;
%extend std::list<ecmdMemoryEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdMemoryEntryList(self)
%}
}
%template(ecmdRingDataList)          std::list<ecmdRingData>;
%extend std::list<ecmdRingData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdRingDataList(self)
%}
}
%template(ecmdLatchDataList)         std::list<ecmdLatchData>;
%extend std::list<ecmdLatchData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdLatchDataList(self)
%}
}
%template(ecmdLatchEntryList)        std::list<ecmdLatchEntry>;
%extend std::list<ecmdLatchEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdLatchEntryList(self)
%}
}
%template(ecmdSpyGroupDataList)      std::list<ecmdSpyGroupData>;
%extend std::list<ecmdSpyGroupData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdSpyGroupDataList(self)
%}
}
%template(ecmdArrayEntryList)        std::list<ecmdArrayEntry>;
%extend std::list<ecmdArrayEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdArrayEntryList(self)
%}
}
%template(ecmdNameEntryList)         std::list<ecmdNameEntry>;
%extend std::list<ecmdNameEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdNameEntryList(self)
%}
}
%template(ecmdNameVectorEntryList)   std::list<ecmdNameVectorEntry>;
%extend std::list<ecmdNameVectorEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdNameVectorEntryList(self)
%}
}
%template(ecmdIndexEntryList)        std::list<ecmdIndexEntry>;
%extend std::list<ecmdIndexEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdIndexEntryList(self)
%}
}
%template(ecmdChipTargetList)        std::list<ecmdChipTarget>;
%extend std::list<ecmdChipTarget> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdChipTargetList(self)
%}
}
%template(ecmdArrayDataList)         std::list<ecmdArrayData>;
%extend std::list<ecmdArrayData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdArrayDataList(self)
%}
}
%template(ecmdTraceArrayDataList)    std::list<ecmdTraceArrayData>;
%extend std::list<ecmdTraceArrayData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdTraceArrayDataList(self)
%}
}
%template(ecmdSpyDataList)           std::list<ecmdSpyData>;
%extend std::list<ecmdSpyData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdSpyDataList(self)
%}
}
%template(ecmdSpyLatchDataList)      std::list<ecmdSpyLatchData>;
%extend std::list<ecmdSpyLatchData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdSpyLatchDataList(self)
%}
}
%template(ecmdScomDataList)          std::list<ecmdScomData>;
%extend std::list<ecmdScomData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdScomDataList(self)
%}
}
%template(ecmdI2CCmdEntryList)       std::list<ecmdI2CCmdEntry>;
%extend std::list<ecmdI2CCmdEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdI2CCmdEntryList(self)
%}
}
%template(ecmdConnectionDataList)    std::list<ecmdConnectionData>;
%extend std::list<ecmdConnectionData> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdConnectionDataList(self)
%}
}
%template(ecmdScomEntryList)         std::list<ecmdScomEntry>;
%extend std::list<ecmdScomEntry> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdScomEntryList(self)
%}
}
%template(ecmdFileLocationList)      std::list<ecmdFileLocation>;
%extend std::list<ecmdFileLocation> {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdFileLocationList(self)
%}
}
%template(uint32_tList)              std::list<uint32_t>;
%extend std::list<uint32_t> {
%pythoncode %{
def __deepcopy__(self, memo):
    return uint32_tList(self)
%}
}
// Template for maps
%template(string_ecmdDataBufferMap)  std::map<std::string, ecmdDataBuffer>;
%extend std::map<std::string, ecmdDataBuffer> {
%pythoncode %{
def __deepcopy__(self, memo):
    return string_ecmdDataBufferMap(self)
%}
}

/*********** Start Copy Constructors ***********/
// We also define __deepcopy__ for each class here since
// they also rely upon the copy constructors we are defining
%copyctor ecmdChipTarget;
%extend ecmdChipTarget {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdChipTarget(self)
%}
}
%copyctor ecmdThreadData;
%extend ecmdThreadData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdThreadData(self)
%}
}
%copyctor ecmdChipUnitData;
%extend ecmdChipUnitData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdChipUnitData(self)
%}
}
%copyctor ecmdChipData;
%extend ecmdChipData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdChipData(self)
%}
}
%copyctor ecmdSlotData;
%extend ecmdSlotData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdSlotData(self)
%}
}
%copyctor ecmdNodeData;
%extend ecmdNodeData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdNodeData(self)
%}
}
%copyctor ecmdCageData;
%extend ecmdCageData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdCageData(self)
%}
}
%copyctor ecmdQueryData;
%extend ecmdQueryData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdQueryData(self)
%}
}
%copyctor ecmdRingData;
%extend ecmdRingData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdRingData(self)
%}
}
%copyctor ecmdArrayData;
%extend ecmdArrayData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdArrayData(self)
%}
}
%copyctor ecmdTraceArrayData;
%extend ecmdTraceArrayData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdTraceArrayData(self)
%}
}
%copyctor ecmdFastArrayData;
%extend ecmdFastArrayData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdFastArrayData(self)
%}
}
%copyctor ecmdScomData;
%extend ecmdScomData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdScomData(self)
%}
}
%copyctor ecmdLataData;
%extend ecmdLatchData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdLataData(self)
%}
}
%copyctor ecmdScomEntry;
%extend ecmdScomEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdScomEntry(self)
%}
}
%copyctor ecmdArrayEntry;
%extend ecmdArrayEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdArrayEntry(self)
%}
}
%copyctor ecmdNameEntry;
%extend ecmdNameEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdNameEntry(self)
%}
}
%copyctor ecmdNameVectorEntry;
%extend ecmdNameVectorEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdNameVectorEntry(self)
%}
}
%copyctor ecmdIndexVectorEntry;
%extend ecmdIndexVectorEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdIndexVectorEntry(self)
%}
}
%copyctor ecmdIndexEntry;
%extend ecmdIndexEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdIndexEntry(self)
%}
}
%copyctor ecmdLatchEntry;
%extend ecmdLatchEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdLatchEntry(self)
%}
}
%copyctor ecmdLatchQueryData;
%extend ecmdLatchQueryData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdLatchQueryData(self)
%}
}
%copyctor ecmdProcRegisterInfo;
%extend ecmdProcRegisterInfo {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdProcRegisterInfo(self)
%}
}
%copyctor ecmdCacheData;
%extend ecmdCacheData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdCacheData(self)
%}
}
%copyctor ecmdSpyData;
%extend ecmdSpyData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdSpyData(self)
%}
}
%copyctor ecmdI2CCmdEntry;
%extend ecmdI2CCmdEntry {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdI2CCmdEntry(self)
%}
}
%copyctor ecmdConnectionData;
%extend ecmdConnectionData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdConnectionData(self)
%}
}
%copyctor ecmdPnorListEntryData;
%extend ecmdPnorListEntryData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdPnorListEntryData(self)
%}
}
%copyctor ecmdPnorListData;
%extend ecmdPnorListData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdPnorListData(self)
%}
}
%copyctor ecmdLooperData;
%extend ecmdLooperData {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdLooperData(self)
%}
}
/*********** End Copy Constructors ***********/

/*********** Start Extend ***********/
// Add a hash function to the ecmdChipTarget
// This allows it to be used as a dict key, etc..
// Use all the values of the ecmdChipTarget in the hash generation for uniqueness
%extend ecmdChipTarget {
%pythoncode %{
def __hash__(self):
    return hash((self.cage, self.cageState, self.node, self.nodeState,
                 self.slot, self.slotState,
                 self.pos, self.posState, self.chipType, self.chipTypeState,
                 self.chipUnitNum, self.chipUnitNumState,
                 self.chipUnitType, self.chipUnitTypeState,
                 self.thread, self.threadState))
%}
}

// Define a __deepcopy__ for the databuffer using its copy constructor
%extend ecmdDataBuffer {
%pythoncode %{
def __deepcopy__(self, memo):
    return ecmdDataBuffer(self)
%}
}
/*********** End Extend ***********/

/*********** Start Map to Bytearray ***********/
// These apply the insert/extract/memCopyIn/memCopyOut functions in the edb
%pybuffer_mutable_string(uint8_t * o_data);
%pybuffer_mutable_string(uint8_t * i_data);
%pybuffer_mutable_string(uint8_t * o_buf);
%pybuffer_mutable_string(uint8_t * i_buf);
/*********** End Map to Bytearray ***********/

/*********** Start Files to swigify ***********/
%include "ecmdDefines.H"
%include "ecmdStructs.H"
%include "ecmdUtils.H"
%include "ecmdSharedUtils.H"
%include "ecmdReturnCodes.H"
%include "ecmdDataBufferBase.H"
%include "ecmdDataBuffer.H"
%include "ecmdClientCapi.H"
%include "ecmdClientPyapi.H"

%include "ecmdExtPyIncludes.i"
/*********** End Files to swigify ***********/
