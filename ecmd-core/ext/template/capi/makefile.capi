# Makefile for the ecmd Extensions

# *****************************************************************************
# Define base info and include any global variables
# *****************************************************************************
EXTENSION_NAME_u := $(shell echo ${EXTENSION_NAME} | tr 'a-z' 'A-Z')
EXTENSION_NAME_u1 := $(shell perl -e 'printf(ucfirst(${EXTENSION_NAME}))')

### Includes
CAPI_INCLUDES := ${CAPI_INCLUDES} ${EXTENSION_NAME}ClientCapi.H ${EXTENSION_NAME}Structs.H
INT_INCLUDES  := ${INT_INCLUDES} ecmdClientCapi.H ecmdDataBufferBase.H ecmdDataBuffer.H 
INT_INCLUDES  := ${INT_INCLUDES} ecmdReturnCodes.H ecmdStructs.H ecmdUtils.H ecmdClientEnums.H

### Generated source
ifeq ($(strip ${DISABLE_AUTOGEN}),)
  # These are the files that will be autogenerated from the template
  TEMPLATE_SOURCE := ${EXTENSION_NAME}ClientCapi.C ${EXTENSION_NAME}DllCapi.C

  # This is the source generated by makedll.pl
  GENERATED_SOURCE := ${EXTENSION_NAME}ClientCapiFunc.C
  GENERATED_INCLUDES := ${EXTENSION_NAME}DllCapi.H ${EXTENSION_NAME}ClientEnums.H
endif

### Concat variables together for the build
# Can't use TEMPLATE_SOURCE, don't want to include *DllCapi.C
CAPI_SOURCE := ${CAPI_SOURCE} ${GENERATED_SOURCE} ${EXTENSION_NAME}ClientCapi.C
### Variables used for the build
CXXFLAGS := ${CXXFLAGS} -I${ECMD_CORE}/capi -I${SRCPATH}
INCLUDES := ${INCLUDES} ${CAPI_INCLUDES} ${GENERATED_INCLUDES}
VPATH    := ${VPATH}:${OBJPATH}:${ECMD_CORE}/capi:${EXT_TEMPLATE_PATH}/capi:${SRCPATH}

# *****************************************************************************
# Define our output files
# *****************************************************************************
SLIB    := lib${EXTENSION_NAME}.so

# *****************************************************************************
# The Main Targets
# *****************************************************************************
# The run-all rule is defined in makefile.rules
all:
	${run-all}

generate: ${GENERATED_SOURCE} ${GENERATED_INCLUDES} ${TEMPLATE_SOURCE}

build: ${SLIB}

test:
  # Do nothing

install:
	@echo "Installing ${EXTENSION_NAME_u} eCMD Client Extension Api to ${INSTALL_PATH} ..."
	cp ${OUTLIB}/${SLIB} ${INSTALL_PATH}/${TARGET_ARCH}/lib/.
	@echo "Installing ${EXTENSION_NAME_u} eCMD Client Extension includes to ${INSTALL_PATH}/includes ..."
	cp ${CAPI_INCLUDES} ${INSTALL_PATH}/include/.

doxygen-capi:
	@cp ${CAPI_INCLUDES} ${DOXYGEN_CAPI_PATH}/.

doxygen-perlapi:
  # Do nothing

doxygen-pyapi:
	@cp ${EXTENSION_NAME}Structs.H ${DOXYGEN_PYAPI_PATH}/.

# *****************************************************************************
# Object Build Targets
# *****************************************************************************
CAPI_SOURCE_OBJS := $(basename ${CAPI_SOURCE})
CAPI_SOURCE_OBJS := $(addprefix ${OBJPATH}, ${CAPI_SOURCE_OBJS})
CAPI_SOURCE_OBJS := $(addsuffix .o, ${CAPI_SOURCE_OBJS})
SLIB_SOURCE_OBJS := $(basename ${SLIB_SOURCE})
SLIB_SOURCE_OBJS := $(addprefix ${OBJPATH}, ${SLIB_SOURCE_OBJS})
SLIB_SOURCE_OBJS := $(addsuffix .o, ${SLIB_SOURCE_OBJS})

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
${CAPI_SOURCE_OBJS}: ${OBJPATH}%.o : %.C ${INCLUDES} ${INT_INCLUDES}
	@echo Compiling $<
	${VERBOSE}${CXX} -c ${CXXFLAGS} $< -o $@ ${DEFINES}
${SLIB_SOURCE_OBJS}: ${OBJPATH}%.o : %.C ${INCLUDES} ${INT_INCLUDES}
	@echo Compiling $<
	${VERBOSE}${CXX} -c ${CXXFLAGS} $< -o $@ ${DEFINES}

# *****************************************************************************
# Create the Shared Library
# *****************************************************************************
${SLIB}: ${SLIB_SOURCE_OBJS} ${CAPI_SOURCE_OBJS} ${LINK_OBJS}
	@echo Linking $@
	${VERBOSE}${LD} ${SLDFLAGS} -o ${OUTLIB}/${SLIB} $^ -ldl -L ${OUTLIB} -lecmd ${EXTLIBS}

# *****************************************************************************
# Autogenerate the Client side of the Dll
# *****************************************************************************
ifeq ($(strip ${DISABLE_AUTOGEN}),)
  ${GENERATED_SOURCE} ${GENERATED_INCLUDES}: ${EXTENSION_NAME}ClientCapi.H ${ECMD_ROOT}/mkscripts/makedll.pl
	@echo "Generating $@"
	@${ECMD_ROOT}/mkscripts/makedll.pl ${EXTENSION_NAME} $@
endif

# *****************************************************************************
# Template source files
# *****************************************************************************
ifeq ($(strip ${DISABLE_AUTOGEN}),)
  ${TEMPLATE_SOURCE}: ${EXTENSION_NAME}% : template%
	@echo "Generating $@"
	@sed "s/template/${EXTENSION_NAME}/g" $< | sed "s/TEMPLATE/${EXTENSION_NAME_u}/g" | sed "s/Template/${EXTENSION_NAME_u1}/g" > ${SRCPATH}/$@
else
  ${EXTENSION_NAME}DllCapi.C:
	@echo "This is a phony, don't need this if we are not auto-genning" > /dev/null
endif

# *****************************************************************************
# Include any global default rules
# *****************************************************************************
include ${ECMD_ROOT}/makefile.rules
