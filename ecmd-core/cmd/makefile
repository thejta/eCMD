# Makefile for the ecmd cmdline

# *****************************************************************************
# Include the common base makefile
# *****************************************************************************
include ../../makefile.base

### Includes
INCLUDES     := ecmdClientCapi.H  ecmdDataBuffer.H  ecmdDataBufferBase.H ecmdReturnCodes.H ecmdStructs.H ecmdUtils.H ecmdSharedUtils.H
INT_INCLUDES := ecmdInterpreter.H ecmdExtInterpreter.H ecmdCommandUtils.H

### Source
SOURCE := ecmdInterpreter.C ecmdCommandUtils.C 
SOURCE := ${SOURCE} ecmdScomUser.C ecmdRingUser.C ecmdQueryUser.C 
SOURCE := ${SOURCE} ecmdSpyUser.C ecmdArrayUser.C ecmdJtagUser.C 
SOURCE := ${SOURCE} ecmdProcUser.C ecmdMemUser.C ecmdIstepUser.C ecmdMiscUser.C 
SOURCE := ${SOURCE} ecmdVpdUser.C ecmdI2cGpioUser.C ecmdPowerUser.C ecmdPsiUser.C
SOURCE := ${SOURCE} ecmdPnorUser.C ecmdSpiUser.C

# This is broke out so it doesn't get included in the archive
MAIN_SOURCE  := ecmdMain.C

# The source file for ecmdVersion is a separate build from the rest
VER_SOURCE   := ecmdVersion.C

# This is the source generated by makeext.py
GENERATED_SOURCE := ecmdExtInterpreter.C

### Concat variables together for the build
SOURCE   := ${GENERATED_SOURCE} ${SOURCE}
INCLUDES := ${INCLUDES} $(foreach ext, ${EXT_CMD}, ${ext}Interpreter.H ${ext}ClientCapi.H ${ext}Structs.H)

### Setup our link objs
LINK_OBJS := ${LINK_OBJS} $(foreach ext, ${EXT_CMD}, ${OUTLIB}/${ext}CmdInterpreter.a)
EXTLIBS   := ${EXTLIBS} ${foreach ext,${EXT_CMD},$(shell if [ -e ${OUTLIB}/lib${ext}.so ]; then echo -l${ext}; fi)}

# Setup our CXXFLAGS and VPATH
VPATH  := ${VPATH}$(foreach ext, ${EXT_CMD},:${EXT_${ext}_PATH}/cmd/:${EXT_${ext}_PATH}/capi/)
VPATH  := ${VPATH}:${OBJPATH}:${SRCPATH}:${ECMD_CORE}/capi

CXXFLAGS := ${CXXFLAGS} -I${ECMD_CORE}/capi -I${ECMD_CORE}/dll -I${SRCPATH}
CXXFLAGS := ${CXXFLAGS} $(foreach ext, ${EXT_CMD},-I${EXT_${ext}_PATH}/cmd -I${EXT_${ext}_PATH}/capi)

# *****************************************************************************
# Define our output files
# *****************************************************************************
TARGET     := ecmd
VER_TARGET := ecmdVersion
AR_TARGET  := ecmdClientCmd.a
HELP_TARGET := ecmd.htxt

# *****************************************************************************
# The x86 Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_BARCH},x86)
  ifeq (${TARGET_ARCH},x86)
    LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd
  else
    LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd -lz
  endif
endif

# *****************************************************************************
# The ppc Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_BARCH},ppc)
  LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd
endif

# *****************************************************************************
# The arm Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_BARCH},arm)
  LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd
endif

# *****************************************************************************
# The Aix Setup stuff
# *****************************************************************************
ifeq (${TARGET_BARCH},aix)
  ifeq (${TARGET_ARCH},aix)
    LDLIBS    := -brtl -w -L${OUTLIB} -lecmd
  else
    ifeq (${TARGET_ARCH},aix64)
      LDLIBS    := -Wl,-brtl -L${OUTLIB} -lecmd -lz
	else
      LDLIBS    := -brtl -w -L${OUTLIB} -lecmd -lz
    endif
  endif
endif

# *****************************************************************************
# The Main Targets
# *****************************************************************************
# The run-all rule is defined in makefile.rules
all:
	${run-all}

generate: ${GENERATED_SOURCE}

build: ${TARGET} ${VER_TARGET} ${AR_TARGET} ${HELP_TARGET}

test:
  # Do nothing

install:
	cp ${OUTBIN}/${TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/bin/
	cp ${OUTBIN}/${VER_TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/bin/
	cp ${OUTBIN}/${VER_TARGET} ${INSTALL_PATH}/bin/${VER_TARGET}_${TARGET_ARCH}
	cp ${OUTBIN}/${HELP_TARGET} ${INSTALL_PATH}/help/

doxygen-capi:
  # Do nothing

doxygen-perlapi:
  # Do nothing

doxygen-pyapi:
  # Do nothing

# *****************************************************************************
# Object Build Targets
# *****************************************************************************
SOURCE_OBJS  = $(basename $(SOURCE))
SOURCE_OBJS := $(addprefix ${OBJPATH}, $(SOURCE_OBJS))
SOURCE_OBJS := $(addsuffix .o, $(SOURCE_OBJS))
VER_SOURCE_OBJS  = $(basename $(VER_SOURCE))
VER_SOURCE_OBJS := $(addprefix ${OBJPATH}, $(VER_SOURCE_OBJS))
VER_SOURCE_OBJS := $(addsuffix .o, $(VER_SOURCE_OBJS))
MAIN_SOURCE_OBJS  = $(basename $(MAIN_SOURCE))
MAIN_SOURCE_OBJS := $(addprefix ${OBJPATH}, $(MAIN_SOURCE_OBJS))
MAIN_SOURCE_OBJS := $(addsuffix .o, $(MAIN_SOURCE_OBJS))

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
$(SOURCE_OBJS) $(MAIN_SOURCE_OBJS) $(VER_SOURCE_OBJS): ${OBJPATH}%.o : %.C ${INCLUDES} ${INT_INCLUDES}
	@echo Compiling $<
	${VERBOSE}${CXX} -c ${CXXFLAGS} $< -o $@ ${DEFINES}

# *****************************************************************************
# Create the Client 
# *****************************************************************************
${TARGET}: ${SOURCE_OBJS} ${MAIN_SOURCE_OBJS} ${LINK_OBJS}
	@echo Linking $@
	${VERBOSE}${LD} ${LDFLAGS} $^ -o ${OUTBIN}/${TARGET} ${LDLIBS} ${EXTLIBS}

${VER_TARGET}: ${VER_SOURCE_OBJS}
	@echo Linking $@
	${VERBOSE}${LD} ${LDFLAGS} $^ -o ${OUTBIN}/${VER_TARGET} ${LDLIBS}

${AR_TARGET}: ${SOURCE_OBJS}
	@echo Creating $@
	${VERBOSE}${AR} r ${OUTLIB}/${AR_TARGET} $^

${HELP_TARGET}:
	@echo Creating $@
	${VERBOSE}./createEcmdHelp.pl ${OUTBIN}/${HELP_TARGET}

# *****************************************************************************
# Autogenerate some of the extension source
# *****************************************************************************
${GENERATED_SOURCE}:
	@echo "Generating $@"
	@${ECMD_ROOT}/mkscripts/makeext.py cmd

# *****************************************************************************
# Include any global default rules
# *****************************************************************************
include ${ECMD_ROOT}/makefile.rules
